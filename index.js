// Generated by CoffeeScript 1.12.2
(function() {
  var _, default_options, minify, path, through, transform;

  through = require('through');

  _ = require("underscore");

  minify = require("html-minifier").minify;

  path = require('path');

  default_options = {
    extensions: ['tpl', 'html'],
    templateSettings: {},
    htmlMinifier: false,
    requires: []
  };

  transform = function(instance_opts) {
    instance_opts = _.extend({}, default_options, instance_opts || {});
    return function(file, opts) {
      var buffer, isTemplate, options;
      options = _.extend({}, instance_opts, opts || {});
      if (typeof options['extensions'] === 'string') {
        options['extensions'] = options['extensions'].split(',');
      }
      isTemplate = _.some(options.extensions, function(ext) {
        return path.extname(file) === '.' + ext;
      });
      if (!isTemplate) {
        return through();
      }
      buffer = "";
      return through(function(chunk) {
        return buffer += chunk.toString();
      }, function() {
        var compiled, e, html, jst;
        compiled = "";
        if (options.requires.length) {
          compiled = _.reduce(options.requires, function(s, r) {
            if (r.variable && r.module) {
              s += 'var ' + r.variable + ' = require("' + r.module + '");' + "\n";
            }
            return s;
          }, '');
        }
        html = buffer.toString();
        if (options.htmlMinifier) {
          html = minify(html, options.htmlMinifier);
        }
        try {
          jst = _.template(html, void 0, options.templateSettings).source;
        } catch (error) {
          e = error;
          this.emit('error', e);
        }
        compiled += "module.exports = " + jst + ";\n";
        this.queue(compiled);
        return this.queue(null);
      });
    };
  };

  module.exports = transform();

  module.exports.transform = transform;

}).call(this);
